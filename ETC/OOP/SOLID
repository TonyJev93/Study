# SOLID

## SOLID 란



### **객체지향 5대 원칙**
- 단일 책임의 원칙 : SRP, Single Responsibility Principle
- 개방 폐쇄의 원칙 : OCP, Open Close Principle
- 리스코브 치환의 원칙 : LSP, The Liskov Substitution Principle
- 인터페이스 분리의 원칙 : ISP, Interface Segregation Principle
- 의존성 역전의 원칙 : DIP, Dependency Inversion Principle

---
## 1. 단일 책임의 원칙(SRP)
- 소프트웨어의 설계 부품(클래스, 함수 등)은 하나의 책임(기능)만을 가져야 한다.
- 응집도는 높고 결합도는 낮은 프로그램을 위함
- 책임이 많아 지면 함수 간의 결합이 발생, 유지보수 비용 증가


## 2. 개방-폐쇄의 원칙(OCP)
- 개존의 코드를 변경하지 않고 기능을 수정하거나 추가할 수 있도록 설계한다.
- OCP를 고려한 설계 = 변경이 되는 것이 무엇인지에 초점
- 자주 변경되는 내용은 수정하기 쉽게 설계
- 변경하지 않아야 하는 것은 수정되는 내용에 영향을 받지 않도록 설계
- 이를 위해 인터페이스 활용

## 3. 리스코브 치환의 원칙(LSP)
- 자식 클래스는 부모클래스에서 가능한 행위를 수행할 수 있어야 한다.
- 부모 클래스와 자식 클래스 사이의 행위가 일관성이 있어야 한다.
- 부모 클래스 대신 자식 클래스를 이용해도 문제가 없어야 한다.
- 일반화 관계가 성립하도록 상속 관계를 만들어야 한다.

```
ex) 
# 도형 인터페이스
    1) 도형은 둘레를 가진다.
    2) 도형은 넓이를 가진다.
    3) 도형은 각을 가진다.

# 사각형 implement 도형
    1) 사각형은 둘레를 가진다.
    2) 사각형은 넓이를 가진다.
    3) 사각형은 각을 가진다.
    >> 부모 대신, 자식 클래스를 이용해도 문제 없음 (통과)
    >> 부모-자식 사이의 일관성 유지 가능

# 원 implement 도형
    1) 원은 둘레를 가진다.
    2) 원은 넓이를 가진다.
    3) 원은 각을 가진다.
    >> 3번 문항에서 문제 발생(원은 각이 없음)
    >> 부모-자식간의 일관성 유지 실패

```

## 4. 인터페이스 분리의 원칙(ISP)
- 한 클래스는 자신이 사용하지 않는 인터페이스는 구현하지 말아야 한다.
- 하나의 일반적인 인터페이스보다, 여러개의 구체적인 인터페이스가 낫다.
- 자신이 사용하지 않는 기능(인터페이스)에는 영향을 받지 않아야 한다.


## 5. 의존성 역전의 원칙(DIP)
- 의존 관계를 맺을 때, 변화하기 쉬운것(구체적) 보단 변화하기 어려운 것(추상적)에 의존해야 한다.
- 변화하기 쉬운것 = 구체화된 클래스 / 변화하기 어려운 것 = 추상클래스 or 인터페이스
- DIP를 만족하는 것 = 구체적 클래스보다 인터페이스 or 추상 클래스와 관계를 맺는 것


----
## 참고
- SOLID 설명 : https://dev-momo.tistory.com/entry/SOLID-%EC%9B%90%EC%B9%99
